/**
 * Created by 14486 on 2019/3/26.
 * 正则表达式
 *    一套用来匹配字符串的规则
 *    转义符号 \ 结合某些字母表现出的特殊意义
 *      \d 匹配一个数字 0-9
 *      /D 匹配一个非数字
 *      \w 匹配 一个数字,字母 下划线
 *      \W 匹配一个非数字字母下划线
 *      \s 匹配一个空格
 *      \S 匹配一个非空格
 *      \b 匹配单词边界/连词符()
 *          afei afeifjei true  /\bafei\b/ false
 *          那些可以构成单词边界
 *              起始位置 空格 结束位置 所有除了\w之外的字符都可以
 *      \B
 *
 *    转义符号在字符串里的另一个意义
 *      展现出某一个具有特殊意义的字符
 *          alert("\""); 把一个有特殊意义的字符变得没有特殊意义
 *          alert("\\");
 *          和一些字母结合有换行或者制表符的意思
 *              \n \r \t
 *
 *    str.match(reg);
 *      将匹配内容以数组的形式返回 匹配失败返回null 全局匹配才会返回数组 类数组
 *          str.match(new RegExp(str1+":","g"));
 *          类数组的第0项是匹配的全部内容
 *          第一项是第一个子集
 *
 *    数量词: {n,m} 只针对前面一个字符起作用
 *      let reg = /2{2,8}/; //匹配2-8个2,默认贪婪匹配 惰性匹配{}?
 *      ? [0,1];
 *      + [1,+∞)
 *      * [0,+∞);
 *      {n,} n到无穷大
 *          ?+*有特殊意义 要匹配它 则要 \?+*  \\
 *
 *    修饰符
 *        i  忽略大小写
 *        g  全局匹配
 *        m  换行匹配
 */
// 贪婪匹配
let s = "a88881239999123";
let r = /a\d+123/; // "a88881239999123"
let r1 = /a\d+?123/; // "a8888123"
console.log(s.match(r));
// 需求将所有的数字装成一个数组
let str = "阿飞:78,木马:12,乌拉:888";
// 字符串方法解决
for (let i = 0; i < length; i++) {
    if(!isNaN(str.charAt(i))){
        // 是数字
        val+=str.charAt(i);
    }else{
        // 不是数字
        val && arr.push(val);
        val = "";
    }
}
// 将最后一次push进去
val && arr.push(val);
// 正则解决
let arr = str.match(/\d+/g); // 等价于上面的

// 第一种写法 双斜杠写法 不能写变量
let reg = /\d+/g;  //匹配多个数字
reg.test("2fjia32"); // 返回布尔值;

// 第二种写法 当正则里面的内容需要引用到变量时候
let x = "fjiai";
let reg1 = new RegExp(x);

alert("\"");
str.match(new RegExp(str1+":","g"));

// 数量词
let reg2 = /2{2,8}/; //匹配2-8个2,默认贪婪匹配
